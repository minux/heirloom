Font handling in troff with PostScript devices
==============================================

The basics
----------

Heirloom troff understands two ways to select PostScript fonts.

The new method can access PostScript font files directly. Fonts are
selected using an extended ".fp" request:

  .fp r yy metricsname [supplyname]			troff only
	reads metrics from "metricsname", which must be in AFM, OpenType,
	or TrueType format. If the TROFFONTS environment variable is set,
	each of the colon-separated directories in it is tried for the files
	"metricsname.afm", "metricsname.otf", "metricsname.ttf", or, if
	"metricsname" has an ".afm", ".otf", or ".ttf" extension itself,
	for "metricsname". Otherwise, the font is loaded from the file
	"/usr/ucblib/doctools/font/devps/metricsname.afm". If this fails,
	a legacy ditroff font is assumed.
	  The font is then available with ".ft yy", "\f(yy", etc. "yy" may
	be freely chosen. The "r" argument specifies a register on which
	the font is to be mounted. If it is zero, the font is mounted on
	a free position (not on position zero). The "r" argument may
	consist of more than a single digit.
	  "yy" may be the name of an existing ditroff-style font, such
	as "R". In this case, the same register must be reused. For best
	compatibility with conventional troff usage, it is recommended
	that the base fonts of a document are mounted as "1 R", "2 I".
	The initial fonts on positions 9 (S1) and 10 (S) should not be
	changed, as these contain special metrics for drawing commands.
	  "yy" may also consist of more than two characters.
	  If the optional "supplyname" argument is present, glyph data
	is included in the generated PostScript file. If "supplyname"
	is one of "otf", "pfb", "pfa", "ttf", or "t42", the file
	"supplyname.pfb" (or likewise) is searched in the directories
	in TROFFONTS first as described for the AFM file above, and if
	it is not found there, in
	"/usr/ucblib/doctools/font/devps/supplyname.pfb" (or
	likewise). "supplyname" may also be the basename of a file like
	"metricsname" above.

As simple examples,
      
	.fp 0 VA van_____ pfb
	.ft VA
	Here is some text in Monotype Van Dijck Regular.

or
      
	.fp 0 AG AGaramondPro-Regular otf
	.ft AG
	Here is some text in Adobe Garamond Pro Regular.


But it is also possible to have different names for the metrics and
glyph data files, as in

	.fp 0 BM mykerning.afm bm______.pfb
	.ft BM
	This text prints in Monotype Bembo using modified kerning.

The new default higher-resolution "ps" PostScript device always uses
AFM files; it supports the conventional ".fp" request for backwards
compatibility to select pre-installed fonts from the PDF base set.

With fonts selected by this method, localized input processing is
performed according to the LC_CTYPE environment variable, or according
to a document-specific value set by the new ".lc_ctype" request. Note
that your terminal and text editor/pager must support UTF-8 to display
the following example properly:

	.\" Enable long request names.
	.do xflag 3
	.\" de_DE.utf8 is for GNU libc; de_DE.UTF-8 may work elsewhere.
	.lc_ctype de_DE.utf8
	Deutscher Text mit „Anführungszeichen“
	.sp
	The first five small letters of the Greek alphabet: α β γ δ ε

Note that any use of AFM, OpenType, or TrueType files requires that the
output of troff is passed to the exactly matching version of dpost, i.e.
to the one that was delivered with the same release of this package.
Sending such troff output directly to a print spooler that invokes a
system version of dpost will thus usually not work.

The old ditroff method requires font tables to be generated manually.
It is still supported, and is still the default for the lower-resolution
"post" PostScript device, but it is not recommended anymore that it is
used for adding fonts. Localized input processing according to LC_CTYPE
is not available with this method.


Installing PostScript Type 1 fonts
----------------------------------

Making additional fonts available is easy with the new method. If you
buy a PostScript Type 1 font for use with troff, select the Windows
version. You will get a set of files from the vendor. Only two of them
are of interest for troff:

  xxxxxxxx.afm
	This is the metrics file. troff accesses it to learn the widths
	of characters in the font.

  xxxxxxxx.pfb
	This file contains the actual glyph data. troff does not really
	need this file, but your printer or PDF converter does. In many
	cases, it is most convenient to include the data directly into
	the .ps file generated, as described for ".fp" above.

Create a directory to hold your fonts. For compatibility with future
versions of troff, it is recommended that it is put outside the troff
hierarchy /usr/ucblib/doctools; something below /usr/local may be a
good choice. For each font you want to install, copy or link both the
AFM and the PFB file into the directory. Set the TROFFONTS environment
variable to this directory; if you have multiple font directories, you
can separate them in TROFFONTS by colons, just as in the PATH variable
for the shell, e.g. "TROFFONTS=/usr/local/share/fonts:/usr/share/fonts
export TROFFONTS". Write the definition in your .profile to make it
permanent. You can now use the fonts with troff. If you want to install
more fonts later, it is sufficient to put them into the font directory.


Installing OpenType or TrueType fonts
-------------------------------------

The procedure for OpenType and TrueType fonts is nearly the same as for
Type 1 fonts, except that there is only one file "FontName.otf" (or
"FontName.ttf") with them that contains both metrics and glyph data.
Just copy this file to a directory given in the TROFFONTS path.


Using OpenType features
-----------------------

High-quality OpenType fonts may contain feature tables that allow special
typographic effects. For example, the Adobe Garamond Pro Regular font
contains titling capitals that can be mapped to the input range of regular
capitals with the ".feature" request in troff:

	.do xflag 3
	.fp 1 R AGaramondPro-Regular otf
	.fp 0 T AGaramondPro-Regular otf
	.feature T +titl
	REGULAR CAPITALS
	.sp
	.ft T
	TITLING CAPITALS

To retrieve a list of features in an individual font that are available
with troff, use "otfdump -s font.otf". Typical useful features are:

	+c2sc		converts capitals to small capitals
	+case		substitutions for use in combination with text
			in all-capital letters
	+onum		old-style numerals
	+pnum		proportional (lining) numerals
	+pnum +onum	proportional old-style numerals
	+smcp		converts lower-case letters to small capitals
	+smcp +c2sc	converts all letters to small capitals
	+titl		titling characters
	+zero		slashed zero

Features such as "aalt" or "ornm" which only map sets of very special
characters to different positions are normally not useful with troff since
these characters can be accessed directly using "\[name]" escape sequences
anyway. To make an individual alternate character the default, the ".ftr"
request can be used:

	.do xflag 3
	.fp 2 I AGaramondPro-Italic otf
	.ftr I Q\[Q.swash]
	.ft I
	Using a swash capital in the word ``Quality.''

Feature mappings result in changes to the same internal data structures as
the ".ftr" request. It is thus possible to make adjustments to mappings by
using ".ftr" after ".feature", or to create personalized variants by using
".ftr" based on the data obtained from "otfdump -s".

The ".feature" request must still be active for a font when a character is
printed; disabling a feature with ".feature F -feat" only works completely
if all of its mappings are still in position. It is thus recommended that
the ".feature" request is used only once for a font immediately after it
has been mounted, and that a font is mounted multiple times, each time for
enabling an individual feature set. Doing so has the additional advantage
that switching between features is conveniently possible using the "\f"
escape sequence.


Using fonts with old-style numerals
-----------------------------------

A Type 1 font with old-style numerals but otherwise standard characters
usually does not require any special mechanism. It can simply be mounted,
selected, and used.

Old-style numerals contained in OpenType fonts can be accessed conveniently
by mapping them to the standard ASCII numbers with the ".feature" request:

	.do xflag 3
	.fp 1 R ACaslonPro-Regular otf
	.feature R +onum
	The numerals 0 1 2 3 4 5 6 7 8 9 are in old-style.


Using fonts with small capital letters
--------------------------------------

Small capital fonts normally need letter space tracking. Thus e.g.
to use the Stempel Garamond small capital font, write something like

	.do xflag 3
	.fp 0 SC gsrsc___ pfb
	.track SC 1 .2 24 2
	.ft SC
	This text prints in Small Capitals.

With an OpenType font, the ".feature" request comes handy again:

	.do xflag 3
	.fp 0 SC ACaslonPro-Regular otf
	.feature SC +smcp
	.track SC 1 .3 24 3
	.ft SC
	This text prints in Small Capitals.


Using a combination of expert and standard fonts for small capitals
-------------------------------------------------------------------

A Type 1 expert font contains small capital letters but no upper-case
capital letters. Since it would be very inconvenient to change the font
explicitly for each upper-case letter, the fallback sequence is useful
in this case. The expert font is selected as text font, but for each
upper-case letter encountered, troff changes automatically to the
standard font. An example with the Monotype Fournier type:

	.do xflag 3
	.fp 1 R fn______ pfb
	.fp 0 E fny_____ pfb
	.track E 1 .2 24 2
	.fallback E R
	.ft E
	This text prints in Small Capitals.

For OpenType fonts, all small capital letters are contained within the
base font, and the "smcp" feature accesses them as shown above.


Using a combination of expert and standard fonts for old-style numerals
-----------------------------------------------------------------------

This also uses the fallback sequence, but since the standard numerals
are present in the standard font, they have to be hidden first so that
troff does not select them:

	.do xflag 3
	.fp 1 R fn______ pfb
	.fp 0 E fny_____ pfb
	.fallback R E
	.hidechar R 0123456789
	The numerals 0 1 2 3 4 5 6 7 8 9 are in old-style.


Using the expert font for both small capitals and old-style numerals
--------------------------------------------------------------------

The examples above can also be combined. Since the .track request does not
affect the tracking of fonts that are selected by the fallback sequence,
it is sufficient to mount each font once:

	.do xflag 3
	.fp 1 R fn______ pfb
	.fp 0 E fny_____ pfb
	.fallback R E
	.fallback E R
	.track E 1 .2 24 2
	.hidechar R 0123456789
	The numerals 0 1 2 3 4 5 6 7 8 9 are in old-style.
	.br
	.ft E
	But this text prints in Small Capitals.


Using the expert font for ligatures
-----------------------------------

PostScript Type 1 fonts usually do not contain ligatures for ff, ffi, and
ffl in the base font; an expert font delivers them in addition. Automatic
substitution of such ligatures can be enabled using the ".flig" request
in combination with the fallback sequence:

	.do xflag 3
	.fp 1 R fn______ pfb
	.fp 0 E fny_____ pfb
	.fallback R E
	.flig R 31
	effective office offline

OpenType fonts usually do contain all ligatures that troff substitutes
automatically, so no special procedure needs to be applied.


Combining different fonts
-------------------------

Different fonts often have different visual sizes even if they are set
in the same nominal point size. To adjust this, the ".fzoom" request
is available. It only applies to characters that are actually in the
current font, not to characters from another font that have been
selected using the fallback sequence.

	.do xflag 3
	.fp 1 R pl______ pfb
	.fzoom H .92
	Text in \fHHelvetica\fP must be adjusted to fit with Plantin.

The ".fzoom" request affects all characters set in the respective font on
the current output line. To create single zoomed words, mount a font twice
under different names, but zoom it only once.


Tracking individual words
-------------------------

Tracking of individual words is used for highlighting text e.g. with German
blackletter faces. Like the ".fzoom" request, the ".track" request applies
to all characters in the respective font on an entire output line. Thus it
is also necessary to mount a font twice but to track it only once when it
is used for tracking individual words.


Setting text in all-capital letters
-----------------------------------

When setting text in all-capital letters, it is normally necessary
to zoom the font to a smaller size than that of the lower-case text
surrounding it, and to track it as well. Mounting the regular font
a second time is the most convenient way to handle this:

	.do xflag 3
	.fp 1 R fn______ pfb
	.fp 0 XC fn______ pfb
	.track XC 1 .2 24 2
	.fzoom XC .9
	Regular text followed by \f(XCALL-CAPITAL TEXT\fP which ends.


Pairwise kerning
----------------

Pairwise kerning is enabled unless the -x0 option is given. The ".kern"
request disables it. Kerning tables are initially read from the AFM,
OpenType, or TrueType files; this default kerning only applies if two
adjacent characters are from the same font. There are two methods to
adjust the kerning tables: In many cases, it is most convenient to
create a private copy of the AFM file and to adjust the "KPX" entries
in it. This has the advantage that the modified kerning pairs are
immediately available for use in other documents.

For OpenType or TrueType fonts, or for cases where this is not suitable
with Type 1 fonts, or not possible because the characters in the kerning
pair originate from a different font, troff provides the ".kernpair"
request:

	.do xflag 3
	.fp 1 R fn______ pfb
	.fp 0 E fny_____ pfb
	.fallback R E
	.hidechar R 0123456789
	.kernpair E 0 R / 50
	.kernpair R / E 1 -90
	.kernpair E 1 R / 40
	.kernpair R / E 2 -80
	0/1/2

In this example, old-style numerals from Fournier Expert are mixed
with the slash character from Fournier Regular, and are adjusted to
achieve matching visual letter spacing.

It is sometimes useful to add a certain amount of space whenever a
character appears, for example before ";" or "?", or on the inner
sides of guillemots in French/Swiss style. The ".kernafter" and
".kernbefore" requests are useful for this:

	.do xflag 3
	.kernafter R ; 60 ? 60

If the characters affected by these requests are also member of a
regular kerning pair, the resulting added space is the sum of both
definitions. These requests are applied at the same places as kerning
pairs, i.e. they have no effect if following or preceding a motion
command, "\&" or line margin, and they are additionally restricted to
have no effect if the other character is a space.


Hanging characters
------------------

Since there are no tables for hanging characters in AFM files, values
must be given explicitly in troff source code using the ".lhang" and
".rhang" requests. Both accept a font specification followed by one
or more pairs of characters and values:

	.do xflag 3
	.ps 10
	.fp 1 R fn______ pfb
	.lhang R V -50 J -40
	.rhang R \(hy 80

Adjustments are given in units of 1/72000 inch multiplied by the actual
point size, or 1/1000 of the em size when the line is printed. Thus in
this example, the left margin is shifted to the left by .5 points when
the leftmost letter is a "V", and by .4 points when the leftmost letter
is a "J"; the right margin is shifted to the right by .8 points when
the rightmost letter is a hyphen.

Left margin adjustments are evaluated before the letters that fit on the
current line are computed, and can thus principally be of any length. In
contrast, right margin adjustments are evaluated after this computation
is finished, and the adjustment is simply added to the word space of the
output line. Thus a positive right adjustment that is large in relation
to the line length will cause visible holes, and a negative adjustment
will ultimately cause the words on the line to be printed over each
other. This is not a problem for the typical application of hanging
punctuation for visual alignment, though; if a line with eight word
spaces is shifted in the example above, each word space is enlarged
by only 1/100 em.


Mathematical and other special characters
-----------------------------------------

Special mathematical characters like "\(+-", greek letters like "\(*a",
and even the punctuation characters \(or \- \` \' " # < > @ \ ^ ~ are
normally not chosen from a font that has been mounted explicitly, but
are taken from the special font instead. (They can always be accessed
with their PostScript names (e.g. "\[numbersign]", "\[less]", "\[at]")).
The ".fps" request can be used to override this behavior. In particular,
this is useful to set mathematical text with a different font. To use
Adobe Myriad Pro for greek letters and mathematical symbols:

	.do xflag 3
	.fps math,greek 1 R MyriadPro-Regular otf
	.fp 2 I MyriadPro-It otf
	.fallback I R
	.EQ
	a ^=^ 2 pi {r sup 2}
	.EN


Helper utilities
----------------

The "otfdump" utility shows the contents of an OpenType or TrueType
font file just as troff interprets it. It emits an ASCII format that
is readable by humans and can also be used for further processing with
shell scripts. It is useful to retrieve lists of characters and features
supported with the font.

The shell script "stuff/showfont.sh" in the source code distribution
uses troff and possibly otfdump to print a map of all characters in an
AFM, OpenType, or TrueType font.


Limitations
-----------

dpost uses a method to embed CFF-based (PostScript-style) OpenType
fonts in PostScript documents that is only available with PostScript 3
interpreters; older printers that use PostScript Level 2 or below cannot
handle such documents directly. The Ghostscript "ps2ps" utility can be
used to create Level 2 documents from dpost output. Also you may have
to update your copy of Ghostscript in order to create PDF files with
proper font embedding from such output.

Embedding TrueType fonts in PostScript documents requires a PostScript 3
interpreter or a PostScript Level 2 interpreter of at least version 2013.

troff only supports OpenType features that result in single-character
substitutions insensitive of context (except for the "fi fl ff ffi ffl"
ligatures and kerning which are enabled by default if possible). Also troff
ignores any features that are not mapped to the "DFLT" or "latn" languages
in an OpenType font.

The PostScript/Unicode conversion tables currently only contain
Western character names; other characters are simply ignored when
they occur in input text. The "Adobe Glyph List" cannot be used for
this task since it lists many characters in positions which are not
appropriate for the troff input mechanism. For example, small capitals
are put in the private area there which would make it necessary to
transform ASCII input text in order to use them; the troff mechanism
in contrast allows them to be selected simply with a font change.
Contributions of appropriate tables for other languages are welcome.


Gunnar Ritter                                                 12/20/05
